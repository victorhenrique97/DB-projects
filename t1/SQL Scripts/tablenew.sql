-- script para a criacao das tabelas em sql

CREATE TABLE FORNECEDOR(

    CNPJ CHAR(18) NOT NULL,
    NOME_FANTASIA VARCHAR2(50) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    CEP CHAR(9) NOT NULL,
    LOGRADOURO VARCHAR2(50) NOT NULL,
    CIDADE VARCHAR2(50) NOT NULL,
    NUMERO NUMBER(5) NOT NULL,
    
    CONSTRAINT CK_CNPJ_FORNECEDOR CHECK(REGEXP_LIKE(CNPJ, '[0-9]{2}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}\-[0-9]{2}')), -- verificacao de cnpj no formato XX.XXX.XXX/XXXX-XX
    CONSTRAINT CK_TELEFONE_FORNECEDOR CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX
    CONSTRAINT CK_CEP_FORNECEDOR CHECK(REGEXP_LIKE(CEP, '[0-9]{5}\-[0-9]{3}')), -- verificacao do cep no formato XXXXX-XXX
    
    CONSTRAINT PK_FORNECEDOR PRIMARY KEY(CNPJ)
);

CREATE TABLE ALUGUEL(

    NF CHAR(11) NOT NULL,
    CNPJ_FORNECEDOR CHAR(18) NOT NULL,
    
    CONSTRAINT CK_NF_ALUGUEL CHECK(REGEXP_LIKE(NF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}')), -- verificacao do numero fiscal no formato XXX.XXX.XXX
    CONSTRAINT CK_CNPJ_FORNECEDOR_ALUGUEL CHECK(REGEXP_LIKE(CNPJ_FORNECEDOR, '[0-9]{2}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}\-[0-9]{2}')), -- verificacao de cnpj no formato XX.XXX.XXX/XXXX-XX
    
    CONSTRAINT PK_ALUGUEL PRIMARY KEY(NF),
    CONSTRAINT FK_ALUGUEL FOREIGN KEY(CNPJ_FORNECEDOR) REFERENCES FORNECEDOR(CNPJ) ON DELETE CASCADE
);

CREATE TABLE TEATRO_FANTOCHE(

    NOME VARCHAR2(50) NOT NULL,
    TIPO VARCHAR2(50),
    SALARIO NUMBER(9,2),
    
    CONSTRAINT PK_TEATRO_FANTOCHE PRIMARY KEY(NOME)
    
);

CREATE TABLE BANDA(

    NOME VARCHAR2(50) NOT NULL,
    ESTILO_MUSICAL VARCHAR2(50),
    SALARIO NUMBER(9,2),
    
    CONSTRAINT PK_BANDA PRIMARY KEY(NOME)
    
);

CREATE TABLE FUNCIONARIO(

    CPF CHAR(14) NOT NULL,
    NOME VARCHAR2(100) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    SALARIO NUMBER(9,2),
    CARGO VARCHAR2(50) NOT NULL,
    
    CONSTRAINT CK_CPF_FUNCIONARIO CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_CARGO_FUNCIONARIO CHECK(UPPER(CARGO) IN ('TECNICO','ORGANIZADOR')), -- se eh um tipo valido
    CONSTRAINT CK_TELEFONE_FUNCIONARIO CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX
    CONSTRAINT PK_FUNCIONARIO PRIMARY KEY(CPF)
 
);

CREATE TABLE ORGANIZADOR(
    
    FUNCIONARIO CHAR(14) NOT NULL,
    
    CONSTRAINT CK_FUNCIONARIO_ORGANIZADOR CHECK(REGEXP_LIKE(FUNCIONARIO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT PK_ORGANIZADOR PRIMARY KEY(FUNCIONARIO),
    CONSTRAINT FK_ORGANIZADOR FOREIGN KEY(FUNCIONARIO) REFERENCES FUNCIONARIO(CPF) ON DELETE CASCADE
);

CREATE TABLE TECNICO(
   
   FUNCIONARIO CHAR(14) NOT NULL,
   ORGANIZADOR CHAR(14),
   
   CONSTRAINT CK_TECNICO_FUNCIONARIO CHECK(REGEXP_LIKE(FUNCIONARIO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
   CONSTRAINT CK_TECNICO_ORGANIZADOR CHECK(REGEXP_LIKE(ORGANIZADOR, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
   
   CONSTRAINT PK_TECNICO PRIMARY KEY(FUNCIONARIO),
   CONSTRAINT FK_TECNICO FOREIGN KEY(ORGANIZADOR) REFERENCES ORGANIZADOR(FUNCIONARIO) ON DELETE SET NULL

);

CREATE TABLE CLIENTE(

    CPF CHAR(14) NOT NULL,
    NOME VARCHAR2(100) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    
    CONSTRAINT CK_CPF_CLIENTE CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TELEFONE_CLIENTE CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX
    
    CONSTRAINT PK_CLIENTE PRIMARY KEY(CPF)
);

CREATE TABLE ANIMADOR(

    CPF CHAR(14) NOT NULL,
    NOME VARCHAR2(100) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    FANTASIA VARCHAR2(50),
    SALARIO NUMBER(9,2),
    
    CONSTRAINT CK_CPF_ANIMADOR CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TELEFONE_ANIMADOR CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX
    CONSTRAINT PK_ANIMADOR PRIMARY KEY(CPF)
);

CREATE TABLE MAGICO(

    CPF CHAR(14) NOT NULL,
    NOME VARCHAR2(100) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    SALARIO NUMBER(9,2),
    
    CONSTRAINT CK_CPF_MAGICO CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TELEFONE_MAGICO CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX
    CONSTRAINT PK_MAGICO PRIMARY KEY(CPF)
);

CREATE TABLE DJ(
   
    CPF CHAR(14) NOT NULL,
    NOME VARCHAR2(100) NOT NULL,
    TELEFONE CHAR(14) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    ESTILO_MUSICAL VARCHAR2(50),
    SALARIO NUMBER(9,2),
    
    CONSTRAINT CK_CPF_DJ CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TELEFONE_DJ CHECK(REGEXP_LIKE(TELEFONE, '\([0-9]{2}\)[0-9]{5}\-[0-9]{4}')), -- verificacao do telefone no formato (XX)XXXXX-XXXX

    CONSTRAINT PK_DJ PRIMARY KEY(CPF)
);

CREATE TABLE TIPO_ATRACAO(
   
    CPF CHAR(14) NOT NULL,
    TIPO_ATRACAO VARCHAR2(8) NOT NULL,
    
    CONSTRAINT CK_CPF_TIPO_ATRACAO CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TIPO_ATRACAO CHECK(UPPER(TIPO_ATRACAO) IN ('ANIMADOR', 'MAGICO', 'DJ')), -- se eh um tipo valido
    
    CONSTRAINT PK_TIPO_ATRACAO PRIMARY KEY(CPF)
);

CREATE TABLE TIPO_PESSOA(
   
    CPF CHAR(14) NOT NULL,
    TIPO_PESSOA VARCHAR2(11) NOT NULL,
    
    CONSTRAINT CK_CPF_TIPO_PESSOA CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_TIPO_PESSOA CHECK(UPPER(TIPO_PESSOA) IN ('FUNCIONARIO', 'ATRACAO', 'CLIENTE')), -- se eh um tipo valido
    CONSTRAINT PK_TIPO_PESSOA PRIMARY KEY(CPF)
);

CREATE TABLE FESTA(

    CEP CHAR(9) NOT NULL,
    LOGRADOURO VARCHAR2(50) NOT NULL,
    CIDADE VARCHAR2(50) NOT NULL,
    NUMERO NUMBER(5) NOT NULL,
    DATA DATE NOT NULL,
    ID_FESTA NUMBER(7) NOT NULL,
    CLIENTE CHAR(14) NOT NULL,
    NUMERO_FISCAL CHAR(11) NOT NULL,
    TIPO_FESTA VARCHAR2(9) NOT NULL,
    
    CONSTRAINT CK_CEP_FESTA CHECK(REGEXP_LIKE(CEP, '[0-9]{5}\-[0-9]{3}')), --verificacao do cep no formato XXXXX-XXX
    CONSTRAINT CK_CLIENTE_FESTA CHECK(REGEXP_LIKE(CLIENTE, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT CK_NUMERO_FISCAL_FESTA CHECK(REGEXP_LIKE(NUMERO_FISCAL, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}')), -- verificacao do numero fiscal no formato XXX.XXX.XXX
    CONSTRAINT CK_TIPO_FESTA_FESTA CHECK(UPPER(TIPO_FESTA) IN ('INFANTIL', 'FORMATURA')), -- se eh um tipo valido
    
    CONSTRAINT PK_FESTA PRIMARY KEY(ID_FESTA),
    CONSTRAINT SK_FESTA UNIQUE(LOGRADOURO,CEP,CIDADE,NUMERO,DATA),
    CONSTRAINT FK_FESTA FOREIGN KEY(CLIENTE) REFERENCES CLIENTE(CPF) ON DELETE CASCADE
    
);

CREATE TABLE FESTA_INFANTIL(

    FESTA NUMBER(7) NOT NULL,
    TEMA VARCHAR2(50),
    
    CONSTRAINT FK_FESTA_INFANTIL FOREIGN KEY(FESTA) REFERENCES FESTA(ID_FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_FESTA_INFANTIL PRIMARY KEY(FESTA)
);

CREATE TABLE FORMATURA(
    
    FESTA NUMBER(7) NOT NULL,
    
    CONSTRAINT FK_FORMATURA FOREIGN KEY(FESTA) REFERENCES FESTA(ID_FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_FORMATURA PRIMARY KEY (FESTA)
);

CREATE TABLE EQUIPAMENTO(
    
    NOME VARCHAR2(50) NOT NULL,
    QUANTIDADE NUMBER(7),
    TIPO_EQUIPAMENTO VARCHAR2(50),
    
    CONSTRAINT PK_EQUIPAMENTO PRIMARY KEY(NOME),
    CONSTRAINT CK_TIPO_EQUIPAMENTO CHECK(UPPER(TIPO_EQUIPAMENTO) IN ('MUSICAL', 'BRINQUEDO')) -- se eh um tipo valido
);

CREATE TABLE BRINQUEDO(

    NOME VARCHAR2(50) NOT NULL,
    
    CONSTRAINT FK_BRINQUEDO FOREIGN KEY(NOME) REFERENCES EQUIPAMENTO(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_BRINQUEDO PRIMARY KEY(NOME)
);

CREATE TABLE EQUIPAMENTO_MUSICAL(

    NOME VARCHAR2(50) NOT NULL,
    
    CONSTRAINT FK_EQUIPAMENTO_MUSICAL FOREIGN KEY(NOME) REFERENCES EQUIPAMENTO(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_EQUIPAMENTO_MUSICAL PRIMARY KEY(NOME)
);

CREATE TABLE EQUIPAMENTO_DJ(

    EQUIPAMENTO VARCHAR2(50) NOT NULL,
    DJ CHAR(14) NOT NULL,
    DATA DATE NOT NULL,
    
    CONSTRAINT CK_DJ_EQUIPAMENTO_DJ CHECK(REGEXP_LIKE(DJ, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_EQUIPAMENTO_DJ FOREIGN KEY(DJ) REFERENCES DJ(CPF) ON DELETE CASCADE,
    CONSTRAINT FK2_EQUIPAMENTO_DJ FOREIGN KEY(EQUIPAMENTO) REFERENCES EQUIPAMENTO(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_EQUIPAMENTO_DJ PRIMARY KEY(EQUIPAMENTO, DJ, DATA)
);


CREATE TABLE AJUSTE_EQUIPAMENTO(

    EQUIPAMENTO VARCHAR2(50) NOT NULL,
    TECNICO CHAR(14) NOT NULL,
    DATA DATE NOT NULL,
    
    CONSTRAINT CK_AJUSTE_EQUIPAMENTO CHECK(REGEXP_LIKE(TECNICO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_AJUSTE_EQUIPAMENTO FOREIGN KEY(TECNICO) REFERENCES TECNICO(FUNCIONARIO) ON DELETE CASCADE,
    CONSTRAINT FK2_AJUSTE_EQUIPAMENTO FOREIGN KEY(EQUIPAMENTO) REFERENCES EQUIPAMENTO(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_AJUSTE_EQUIPAMENTO PRIMARY KEY(EQUIPAMENTO, TECNICO, DATA)
);

CREATE TABLE FESTA_FUNCIONARIO(
    
    FUNCIONARIO CHAR(14) NOT NULL,
    FESTA NUMBER(7) NOT NULL,
    
    CONSTRAINT FK1_FESTA_FUNCIONARIO FOREIGN KEY (FUNCIONARIO) REFERENCES FUNCIONARIO(CPF) ON DELETE CASCADE,    
    CONSTRAINT FK2_FESTA_FUNCIONARIO FOREIGN KEY (FESTA) REFERENCES FESTA(ID_FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_FESTA_FUNCIONARIO PRIMARY KEY(FUNCIONARIO,FESTA)
);

CREATE TABLE ALUGUEL_EQUIPAMENTO(
    
    ALUGUEL CHAR(11) NOT NULL,
    EQUIPAMENTO VARCHAR2(50) NOT NULL,
    
    CONSTRAINT CK_ALUGUEL_EQUIPAMENTO_ALUGUEL CHECK(REGEXP_LIKE(ALUGUEL, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_ALUGUEL_EQUIPAMENTO FOREIGN KEY (ALUGUEL) REFERENCES ALUGUEL(NF) ON DELETE CASCADE,    
    CONSTRAINT FK2_ALUGUEL_EQUIPAMENTO FOREIGN KEY (EQUIPAMENTO) REFERENCES EQUIPAMENTO(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_ALGUEL_EQUIPAMENTO PRIMARY KEY(ALUGUEL, EQUIPAMENTO)
);

CREATE TABLE APRESENTACAO_ANIMADOR(

    ANIMADOR CHAR(14) NOT NULL,
    FESTA_INFANTIL NUMBER(7) NOT NULL,
    
    CONSTRAINT CK_APRESENTACAO_ANIMADOR CHECK(REGEXP_LIKE(ANIMADOR, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_APRESENTACAO_ANIMADOR FOREIGN KEY (ANIMADOR) REFERENCES ANIMADOR(CPF) ON DELETE CASCADE,    
    CONSTRAINT FK2_APRESENTACAO_ANIMADOR FOREIGN KEY (FESTA_INFANTIL) REFERENCES FESTA_INFANTIL(FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_APRESENTACAO_ANIMADOR PRIMARY KEY(ANIMADOR, FESTA_INFANTIL)
 );

CREATE TABLE APRESENTACAO_MAGICO(

    MAGICO CHAR(14) NOT NULL,
    FESTA_INFANTIL NUMBER(7) NOT NULL,
    
    CONSTRAINT CK_APRESENTACAO_MAGICO CHECK(REGEXP_LIKE(MAGICO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_APRESENTACAO_MAGICO FOREIGN KEY (MAGICO) REFERENCES MAGICO(CPF) ON DELETE CASCADE,    
    CONSTRAINT FK2_APRESENTACAO_MAGICO FOREIGN KEY (FESTA_INFANTIL) REFERENCES FESTA_INFANTIL(FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_APRESENTACAO_MAGICO PRIMARY KEY(MAGICO, FESTA_INFANTIL)
 );

CREATE TABLE APRESENTACAO_TEATRO(

    TEATRO VARCHAR2(50) NOT NULL,
    FESTA_INFANTIL NUMBER(7) NOT NULL,
    
    CONSTRAINT FK1_APRESENTACAO_TEATRO FOREIGN KEY (TEATRO) REFERENCES TEATRO_FANTOCHE(NOME) ON DELETE CASCADE,    
    CONSTRAINT FK2_APRESENTACAO_TEATRO FOREIGN KEY (FESTA_INFANTIL) REFERENCES FESTA_INFANTIL(FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_APRESENTACAO_TEATRO PRIMARY KEY(TEATRO, FESTA_INFANTIL)
 );

CREATE TABLE APRESENTACAO_BANDA(

    BANDA VARCHAR2(50) NOT NULL,
    FORMATURA NUMBER(7) NOT NULL,
    
    CONSTRAINT FK1_APRESENTACAO_BANDA FOREIGN KEY (BANDA) REFERENCES BANDA(NOME) ON DELETE CASCADE,    
    CONSTRAINT FK2_APRESENTACAO_BANDA FOREIGN KEY (FORMATURA) REFERENCES FORMATURA(FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_APRESENTACAO_BANDA PRIMARY KEY(BANDA, FORMATURA)
 );

CREATE TABLE APRESENTACAO_DJ(

    DJ CHAR(14) NOT NULL,
    FORMATURA NUMBER(7) NOT NULL,
    
    CONSTRAINT CK_APRESENTACAO_DJ CHECK(REGEXP_LIKE(DJ, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')), -- verificacao do cpf no formato XXX.XXX.XXX-XX
    CONSTRAINT FK1_APRESENTACAO_DJ FOREIGN KEY (DJ) REFERENCES DJ(CPF) ON DELETE CASCADE,    
    CONSTRAINT FK2_APRESENTACAO_DJ FOREIGN KEY (FORMATURA) REFERENCES FORMATURA(FESTA) ON DELETE CASCADE,
    CONSTRAINT PK_APRESENTACAO_DJ PRIMARY KEY(DJ, FORMATURA)
 );

CREATE TABLE INTEGRANTE_BANDA(

    BANDA VARCHAR2(50) NOT NULL,
    NOME_INTEGRANTE VARCHAR2(50) NOT NULL,
    
    CONSTRAINT FK_INTEGRANTE_BANDA FOREIGN KEY (BANDA) REFERENCES BANDA(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_INTEGRANTE_BANDA PRIMARY KEY(BANDA, NOME_INTEGRANTE)
 );

CREATE TABLE INTEGRANTE_TEATRO(

    TEATRO VARCHAR2(50) NOT NULL,
    NOME_INTEGRANTE VARCHAR2(50) NOT NULL,
    
    CONSTRAINT FK_INTEGRANTE_TEATRO FOREIGN KEY (TEATRO) REFERENCES TEATRO_FANTOCHE(NOME) ON DELETE CASCADE,
    CONSTRAINT PK_INTEGRANTE_TEATRO PRIMARY KEY(TEATRO, NOME_INTEGRANTE)
 );


-- select 'drop table '||table_name||' cascade constraints;' from user_tables; 




